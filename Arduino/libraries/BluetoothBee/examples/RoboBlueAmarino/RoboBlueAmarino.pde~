/*
  Receives Test Events from your phone.
  After it gets a test message the led 13 will blink
  for one second.
*/
 
/*
  RoboBlueAmarino.h - Test code for Amarino
  Copyright (c) 2011 Robomotic ltd.  All right reserved.
  
  Receives Test Events from your phone.
  After it gets a test message the led 13 will blink
  for one second.
    
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Acknowledgements:
  This library is based on the MeetAndroid library from the Amarino team. 
  The original library has been modified to address the 
  specific demand to communicate with the Amarino toolkit.
  
*/

#include <MeetAndroid.h>
#include <BluetoothBee.h>
#define BAUDRATE 57600
MeetAndroid meetAndroid;
int onboardLed = 13;
BluetoothBee btconnection;
void setup()  
{
  pinMode(onboardLed, OUTPUT);

  Serial.begin(BAUDRATE); 
  // use the baud rate your bluetooth module is configured to 
  // not all baud rates are working well, i.e. ATMEGA168 works best with 57600
  setupBlueToothConnection();
  
  //begin pairing
  if(btconnection.startPairing())
  {
    //waiting for the user to put PIN on the mobile phone
    while(btconnection.waitForConnection())
    {
        flushLed(300);
    }
  }//pairing didn't work
  else digitalWrite(onboardLed, HIGH);

  // register callback functions, which will be called when an associated event occurs.
  // - the first parameter is the name of your function (see below)
  // - match the second parameter ('A', 'B', 'a', etc...) with the flag on your Android application
  meetAndroid.registerFunction(testEvent, 'A');  
}

void loop()
{
  if(btconnection.isConnected)
        meetAndroid.receive(); // you need to keep this in your loop() to receive events
  else digitalWrite(onboardLed, HIGH);
}

void flushLed(int time)
{
  digitalWrite(onboardLed, LOW);
  delay(time);
  digitalWrite(onboardLed, HIGH);
  delay(time);
  digitalWrite(onboardLed, LOW);
  delay(time);
}
/*
 * This method is called constantly.
 * note: flag is in this case 'A' and numOfValues is 0 (since test event doesn't send any data)
 */
void testEvent(byte flag, byte numOfValues)
{
  flushLed(300);
  flushLed(300);
}

void setupBlueToothConnection()
{
    // use the baud rate your bluetooth module is configured to 
    // not all baud rates are working well, i.e. ATMEGA168 works best with 57600
 

    delay(1000);
    btconnection.setSlave();
    btconnection.setName("XMoteSens");
    btconnection.setAutoConnect(true);
    btconnection.setPermitPaired(true);
    btconnection.setPin("0000");
    delay(2000); // This delay is required.
}

 


